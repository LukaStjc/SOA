version: "3.7"



services:
  blog-service:
    build:
      context: .
      dockerfile: ./BlogMicroservice/Dockerfile
    image: blog-service
    container_name: blog-service
    restart: on-failure
    ports:
      - ${BLOG_SERVICE_PORT}:${BLOG_SERVICE_PORT}
    environment:
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN} 
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      BLOG_DB_PORT: ${USER_DB_PORT}
      BLOG_DB_HOST: ${USER_DB_HOST}
      PORT: ${BLOG_SERVICE_PORT}
    networks:
      - servers
    depends_on:
      postgres-db:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224

  auth-service:
    build:
      context: .
      dockerfile: ./Authentication/Dockerfile
    image: auth-service
    container_name: auth-service
    restart: on-failure
    # ports:
    #  - ${AUTHENTICATION_SERVICE_PORT}:${AUTHENTICATION_SERVICE_PORT}
    environment:
      AUTHENTIFICATION_DB_PORT: ${AUTHENTIFICATION_DB_PORT}
      AUTHENTIFICATION_DB_HOST: ${AUTHENTIFICATION_DB_HOST}
      PORT: ${AUTHENTICATION_SERVICE_PORT}
      SECRET: ${SECRET}
    networks:
      - servers
    depends_on:
      postgres-db-auth:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224

 



  user-service:
    build:
      context: .
      dockerfile: ./UserManagement/Dockerfile
    image: user-service
    container_name: user-service
    restart: on-failure
    # ports:
    #  - ${USER_SERVICE_PORT}:${USER_SERVICE_PORT}
    environment:
      AUTHENTICATION_SERVICE_DOMAIN: ${AUTHENTICATION_SERVICE_DOMAIN} 
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_DB_HOST: ${USER_DB_HOST}
      PORT: ${USER_SERVICE_PORT}
      SECRET: ${SECRET}
    networks:
      - servers
    depends_on:
      postgres-db:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224


  api-gateway:
    image: api-gateway
    container_name: api-gateway
    hostname: api-gateway
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    restart: always
    environment:
      AUTH_SERVICE_ADDRESS: auth-service:${AUTHENTICATION_SERVICE_PORT}
      USER_SERVICE_ADDRESS: user-service:${USER_SERVICE_PORT}
      GATEWAY_ADDRESS: ${GATEWAY_ADDRESS}
    networks:
     - servers
    depends_on:
      - user-service    
      - auth-service

    ports:
      - "8500:8500"
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224





  postgres-db:   #SOA baza
    image: postgres
    restart: on-failure
    networks:
      - servers
    ports:
      - ${USER_DB_EXTERNAL_PORT}:5432 
    environment:
      POSTGRES_DB: SOA     
      POSTGRES_USER: postgres          
      POSTGRES_PASSWORD: ftn
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]  # Check if PostgreSQL is ready
      interval: 10s  # Check every 10 seconds
      retries: 5  # Retry 5 times before considering it unhealthy

  postgres-db-auth:   #SOA_auth baza
    image: postgres
    restart: on-failure
    networks:
      - servers
    ports:
      - ${AUTHENTIFICATION_DB_EXTERNAL_PORT}:5432 
    environment:
      POSTGRES_DB: SOA_auth     
      POSTGRES_USER: postgres          
      POSTGRES_PASSWORD: ftn
    volumes:
      - database-data-auth:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]  # Check if PostgreSQL is ready
      interval: 10s  # Check every 10 seconds
      retries: 5  # Retry 5 times before considering it unhealthy


  # NoSQL: Neo4J DB
  neo4j:
    image: neo4j
    restart: always
    networks:
      - servers
    ports:
      # bolt
      - "7687:7687"
      # http
      - "7474:7474"
      # https
      - "7473:7473"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p nekaSifra || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/nekaSifra
    volumes:
      - neo4j_data:/data

  tour-service:
    build:
      context: .
      dockerfile: ./TourMicroservice/Dockerfile
    image: tour-service
    container_name: tour-service
    restart: on-failure
    ports:
      - ${TOUR_SERVICE_PORT}:${TOUR_SERVICE_PORT}
    environment:
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN} 
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      TOUR_DB_PORT: ${USER_DB_PORT}
      TOUR_DB_HOST: ${USER_DB_HOST}
      PORT: ${TOUR_SERVICE_PORT}
    networks:
      - servers
    depends_on:
      postgres-db:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224


  adminer:   
    image: adminer
    restart: always
    ports:
      - "8089:8080"   
    networks:
      - servers  

  grafana:
    image: grafana/grafana:7.4.2
    container_name: 'grafana'
    restart: unless-stopped
    volumes:
      - ./data/grafana/data:/var/lib/grafana
      - ./configs/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    networks:
      - servers
    ports:
      - 3000:3000
    depends_on:
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

  loki:
    image: grafana/loki:2.1.0
    container_name: loki
    command: -config.file=/mnt/loki-local-config.yaml
    user: root
    restart: unless-stopped
    volumes:
      - ./data/loki/data:/tmp/loki
      - ./configs/loki/loki.yml:/mnt/loki-local-config.yaml
    ports:
      - 3100:3100
    networks:
      - servers
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:latest
    container_name: fluent-bit
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    volumes:
    - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - servers
volumes:
  database-data:
    name: server-database
  database-data-auth:
    name: server-database-auth
  neo4j_data:

networks:
  servers:
    name: servers
    driver: bridge